#!/usr/bin/env python
# -*- coding: utf-8 -*-

# logging, config, IO
import yaml
import logging
import time
import os
import sys
import optparse

import locale
import gettext

gettext.install('smspie', '/usr/share/locale')

__author__ = "d-fens"
__version__ = '0.2'
__copyright__ = 'Copyright (c) 2009 d-fens'
__license__ = 'MIT License'

CONFIG_DIR = '~/.smspie/'
CONFIG_FILE = os.path.join(CONFIG_DIR, 'config.yaml')

# Import Psyco if available
try:
	import psyco
	psyco.full()
except ImportError:
	pass

if __name__ == '__main__':
	p = optparse.OptionParser(description='Send SMS via command line',
		prog='smspie',
		version='%prog ' + __version__,
		usage='%prog 0851234567')
	p.add_option('-C', '--provider', help=_('sets the SMS provider'))
	p.add_option('-c', '--config', help=_('sets the path to the config file'))
	p.add_option('-i', '--import-contacts', action='store_true', help=_('import Meteor contacts, copy and paste into the config file'))
	p.add_option('-l', '--list', action='store_true', help=_('list the people in your phonebook'))
	p.add_option('-m', '--message', help=_('the message you want to send'))
	p.add_option('-u', '--username', help=_('set your username'))
	p.add_option('-p', '--password', help=_('set your password'))
	p.add_option('-v', '--verbose', action='count', help=_('set the output as verbose (debug)'))

	options, arguments = p.parse_args()

	# print logging more, or greater, or normal (which is show errors)
	FORMAT = '%(asctime)s %(levelname)-8s %(name)-12s %(message)s'
	if options.verbose == 1:
		logging.basicConfig(level=logging.INFO, format=FORMAT, datefmt='%a, %d %b %Y %H:%M:%S')
		logging.info("Setting logging level as INFO.")
	elif options.verbose > 1:
		logging.basicConfig(level=logging.DEBUG, format=FORMAT, datefmt='%a, %d %b %Y %H:%M:%S')
		logging.debug("Setting logging level as DEBUG.")
	else:
		logging.basicConfig(level=logging.ERROR, format=FORMAT, datefmt='%a, %d %b %Y %H:%M:%S')

	# make sure that SMSPie has a place to save
	if not os.path.exists(os.path.expanduser(CONFIG_DIR)):
		os.mkdir(os.path.expanduser(CONFIG_DIR))
	if not os.path.exists(os.path.expanduser(CONFIG_FILE)):
		config = """main:
  use_proxy: false
  proxy: proxy3.dcu.ie:3128
  user-agent: 'User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.14) Gecko/2009090216 Ubuntu/9.04 (jaunty) Firefox/3.0.14'

# you can override any of main by putting the same setting inside the sms' name block
providers:
  meteor:
    username: 0851234567
    password: 9999
    cookiefile: '~/.smspie/meteor.cookie.cache'
    referer: 'https://www.mymeteor.ie/'
  vodafone:
    username: 0851234567
    password: 9999
    cookiefile: '~/.smspie/vodafone.cookie.cache'
    referer: 'https://www.vodafone.ie/'
  o2:
    username: 0851234567
    password: 9999
    cookiefile: '~/.smspie/o2.cookie.cache'
    referer: 'https://www.o2.ie/'

phonebook:"""

		f = open(os.path.expanduser(CONFIG_FILE), 'w')
		f.write(config)
		f.close()

		print((_("SMSPie has created a default configuations at %s, you should edit this before continuing.") % (CONFIG_FILE)))
		sys.exit()

	config = yaml.load(open(os.path.expanduser(CONFIG_FILE), 'r'))
	# make sure theres is some configuration there
	if len(config['providers']) < 1:
		print((_("SMSPie is missing provider information, you should edit %s.") % (CONFIG_FILE)))
		sys.exit()

	# it merges the settings from main and the provider into main, so you can override stuff
	provider_config = None
	for provider in config['providers']:
		if str(options.provider).lower() == provider.lower():
			config['main'].update(config['providers'][provider])
			provider_config = config['main']
			break

	if options.username:
		provider_config['username'] = options.username
	if options.password:
		provider_config['username'] = options.password

	# message time! we can do more than one contact
	if len(arguments) == 1:
		if not provider_config:
			print((_("SMSPie is missing provider argument, you should edit %s and add the relevant information.") % (CONFIG_FILE)))
			sys.exit()

		# importing the required module and class we want
		k = __import__('smspie.providers.' + options.provider.lower(), globals(), locals(), [options.provider.lower()], -1)
		p = getattr(k, options.provider.lower())

		m = p(provider_config)
		if m.resumable():
			print((_("[ Using a session for %s@%s ... ]") % (provider_config['username'], options.provider)))
		else:
			print((_("[ Logging in to %s@%s ... ]") % (provider_config['username'], options.provider)))
			m.login(provider_config['username'], provider_config['password'])

		# we can do multiple recipients, but atm meteor can do this
		# we can save on http requests, but I'm leaving it out for now
		# TODO: move this up futher so we can check if the number for this contact exists
		for argument in arguments:
			contact = {'username': '', 'phonenumber': ''}
			try:
				contact['phonenumber'] = "%010d" % int(argument)
			except ValueError:
				for person in config['phonebook']:
					if person['username'].lower() == argument.lower():
						contact = person
						break
			if contact == {'username': '', 'phonenumber': ''}:
				print((_("The person wasn't found in your phonebook.")))
				sys.exit()
			print((_("[ Recipient: %s (%s) ]") % (contact['username'], contact['phonenumber'])))

			message = ""
			if options.message:
				message = options.message
			else:
				while 1:
					try:
						message = message + raw_input('> ') + "\n"
					except KeyboardInterrupt:
						print("")
						print((_("Cancelling message.")))
						sys.exit()
					except EOFError:
						print("") # to cleanup raw_input on CLI
						break
			sent = m.message(contact['phonenumber'], message)
			if sent:
				print((_("[ Message sent to %s (%s) ]") % (contact['username'], contact['phonenumber'])))
			else:
				print((_("[ Failed to send ... :-( ]")))
	# list our contacts
	elif options.list:
		for contact in config['phonebook']:
			print(("%-15s %10s" % (contact['username'], contact['phonenumber'])))
	# we can import contacts (from meteor anyway)
	elif options.provider and options.import_contacts:
		if str(options.provider).lower() != "meteor":
			print((_("Only Meteor is supported at the moment.")))
			sys.exit()
		from smspie.providers import *
		m = meteor.meteor(provider_config)
		m.login(provider_config['username'], provider_config['password'])
		print((_("Add the following to the %s under the section phonebook") % (CONFIG_FILE)))
		print("") 
		print("phonebook:")
		print((yaml.dump(m.import_contacts())))
	# help me!
	else:
		p.print_help()
